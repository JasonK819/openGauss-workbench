{"version":3,"file":"js/8957.53c54571.js","mappings":"qKAGO,MAAMA,GAAsBC,EAAAA,EAAAA,IAAY,kBAAmB,CAChEC,MAAO,KACE,CACLC,kBAAmB,CAAC,EACpBC,WAAY,KACZC,YAAY,EACZC,gBAAiB,GACjBC,MAAO,CAAC,EACRC,cAAe,KACfC,KAAM,OAGVC,QAAS,CACPC,QAAST,GAASA,EAAMO,KACxBG,qBAAsBV,GAASA,EAAMC,kBACrCU,cAAeX,GAASA,EAAME,WAC9BU,SAAUZ,GAASA,EAAMK,OAE3BQ,QAAS,CACPC,QAASP,GACPQ,KAAKC,QAAOhB,IACVA,EAAMO,KAAOA,CAAI,GAErB,EAEAU,UAAWC,GACTH,KAAKT,cAAgBY,CACvB,EAEAC,mBAAoBC,GAClBL,KAAKC,QAAOhB,IACVA,EAAMI,gBAAgBiB,KAAKD,EAAK,GAEpC,EAEAE,cAAeC,EAA2BpB,GACxCY,KAAKC,QAAOhB,IACVA,EAAMG,WAAaA,EACnBH,EAAME,WAAaqB,CAAQ,GAE/B,EAEAC,gBACE,MAAMN,EAAO,CACX,CAAEO,GAAI,EAAGC,KAAM,aAAcC,OAAQ,CACnC,CAAEF,GAAI,EAAGC,KAAM,gBACf,CAAED,GAAI,EAAGC,KAAM,iBACf,CAAED,GAAI,EAAGC,KAAM,qBAEjB,CAAED,GAAI,EAAGC,KAAM,eAAgBC,OAAQ,CACrC,CAAEF,GAAI,EAAGC,KAAM,aACf,CAAED,GAAI,EAAGC,KAAM,YACf,CAAED,GAAI,EAAGC,KAAM,eAGnBX,KAAKd,kBAAoBiB,CAC3B,EAEAU,QAASC,EAAaC,GACpBf,KAAKC,QAAOhB,IACVA,EAAMK,MAAMwB,GAAOC,CAAI,GAE3B,I,4IC3DJ,MAAMC,GAAUjC,EAAAA,EAAAA,KACHkC,EAAad,IACxB,IAAIe,GAAQ,EACRC,EAAU,GAsBd,OArBIhB,GAAQA,EAAKiB,OAASC,MAAMC,QAAQnB,EAAKiB,QAAUjB,EAAKiB,MAAMG,OAAS,GACzEpB,EAAKiB,MAAMI,SAASC,IAClB,GAAmB,SAAfA,EAAKC,MAAkB,CACzB,MAAMC,EAAgBX,EAAQnB,SAAS4B,EAAKtB,KAAKyB,YAC7CH,EAAKtB,OACHsB,EAAKtB,KAAKY,MAAkC,oBAAnBU,EAAKtB,KAAKY,KAChCU,EAAKtB,KAAKY,KAAKU,EAAKtB,QACvBe,GAAQ,EACRC,GAAW,IAAIM,EAAKtB,KAAK0B,QAAUrC,EAAAA,EAAAA,OAAAA,EAAc,sCAE1CmC,GAA0C,oBAAlBA,IAC5BA,EAAcF,EAAKtB,QACtBe,GAAQ,EACRC,GAAW,IAAIM,EAAKtB,KAAK0B,QAAUrC,EAAAA,EAAAA,OAAAA,EAAc,uC,MAOxD0B,GAASC,GAASW,EAAAA,EAAAA,MAAmB,CAAEC,SAAU,cAAeC,QAASb,EAASc,UAAU,EAAMC,SAAU,MAC1GhB,CAAK,EAEDiB,EAAcC,IACzB,GAAIA,EAAO,CACT,MAAMC,EAAuCD,EAAME,SAKnD,OAJAD,EAASjB,MAAMI,SAASC,IAClBA,EAAKtB,MAAQsB,EAAKtB,KAAKyB,WAAYH,EAAKG,WAAaH,EAAKtB,KAAKyB,WAC3C,SAAfH,EAAKC,QAAkBD,EAAKG,WAAa,OAAM,IAEnDS,C,CACF,MAAO,EAAE,C","sources":["webpack://web-ui/./src/store/modules/modeling/common.ts","webpack://web-ui/./src/views/modeling/dataflow/child/detail/utils/operateJson.ts"],"sourcesContent":["import { KeyValue } from '@/api/modeling/request'\nimport { defineStore } from 'pinia'\n\nexport const useModelCommonStore = defineStore(`modeling-common`, {\n  state: () => {\n    return {\n      currentSelectData: {},\n      selectNode: null as KeyValue | null,\n      showConfig: false,\n      isRegisterNodes: [] as Array<string>,\n      rules: {} as KeyValue,\n      nodeEventData: null as any,\n      i18n: null as any\n    }\n  },\n  getters: {\n    getI18n: state => state.i18n,\n    getCurrentSelectData: state => state.currentSelectData,\n    getSelectNode: state => state.selectNode,\n    getRules: state => state.rules\n  },\n  actions: {\n    setI18n (i18n: any) {\n      this.$patch(state => {\n        state.i18n = i18n\n      })\n    },\n    // nodeEvent\n    nodeEvent (data: any) {\n      this.nodeEventData = data\n    },\n    // add register node\n    setIsResigterNodes (node: string) {\n      this.$patch(state => {\n        state.isRegisterNodes.push(node)\n      })\n    },\n    // modify seleced node\n    setSelectNode (nodeInfo: KeyValue | null, showConfig: boolean) {\n      this.$patch(state => {\n        state.showConfig = showConfig\n        state.selectNode = nodeInfo\n      })\n    },\n    // \n    setSelectData () {\n      const data = [\n        { id: 5, name: 'hs.article', fields: [\n          { id: 1, name: 'article.type' },\n          { id: 2, name: 'article.title' },\n          { id: 3, name: 'article.content' }\n        ] },\n        { id: 1, name: 'hs.user_test', fields: [\n          { id: 1, name: 'user.name' },\n          { id: 2, name: 'user.sex' },\n          { id: 3, name: 'user.age' }\n        ] }\n      ]\n      this.currentSelectData = data\n    },\n    // \n    setRule (key: string, rule: any) {\n      this.$patch(state => {\n        state.rules[key] = rule\n      })\n    }\n  }\n})\n","\nimport { useModelCommonStore } from '@/store/modules/modeling/common'\nimport { Cell, Graph } from '@antv/x6'\nimport { KeyValue } from '@antv/x6/lib/types'\nimport { Notification } from '@arco-design/web-vue'\nimport i18n from '@/locale/index'\nconst mCStore = useModelCommonStore()\nexport const checkData = (data: any): boolean => {\n  let check = true\n  let message = ``\n  if (data && data.cells && Array.isArray(data.cells) && data.cells.length > 0) {\n    data.cells.forEach((item: Cell) => {\n      if (item.shape !== 'edge') {\n        const storeSaveRule = mCStore.getRules[item.data.cells_type]\n        if (item.data) {\n          if (item.data.rule && typeof item.data.rule === 'function') {\n            if (!item.data.rule(item.data)) {\n              check = false\n              message += `[${item.data.text}]` + i18n.global.t('modeling.utils.index.5m78yfizcxc0')\n            }\n          } else if (storeSaveRule && typeof storeSaveRule === 'function') {\n            if (!storeSaveRule(item.data)) {\n              check = false\n              message += `[${item.data.text}]` + i18n.global.t('modeling.utils.index.5m78yfizcxc0')\n            }\n          }\n        }\n      }\n    })\n  }\n  if (!check && message) Notification.error({ position: 'bottomRight', content: message, closable: true, duration: 10 * 1000 })\n  return check\n}\nexport const jsonFormat = (graph: Graph) => {\n  if (graph) {\n    const jsonData: { cells: Array<KeyValue> } = graph.toJSON()\n    jsonData.cells.forEach((item: KeyValue) => {\n      if (item.data && item.data.cells_type) item.cells_type = item.data.cells_type\n      else if (item.shape === 'edge') item.cells_type = 'line'\n    })\n    return jsonData\n  } else return ''\n}\n"],"names":["useModelCommonStore","defineStore","state","currentSelectData","selectNode","showConfig","isRegisterNodes","rules","nodeEventData","i18n","getters","getI18n","getCurrentSelectData","getSelectNode","getRules","actions","setI18n","this","$patch","nodeEvent","data","setIsResigterNodes","node","push","setSelectNode","nodeInfo","setSelectData","id","name","fields","setRule","key","rule","mCStore","checkData","check","message","cells","Array","isArray","length","forEach","item","shape","storeSaveRule","cells_type","text","Notification","position","content","closable","duration","jsonFormat","graph","jsonData","toJSON"],"sourceRoot":""}